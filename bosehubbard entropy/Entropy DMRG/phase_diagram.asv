% N = 16; L = 16; mu = 0.5; t = 0.2; U = 1; V = 0; k = 0; conserved_QNum = N;
% t_list = (1:25)/80;
% mu_list = (1:25)/80;
% 
% size = length(t_list);
% data = zeros(size*size, L+2);
% for t_index=1: length(t_list)
%     for mu_index=1: length(mu_list)
%         t = t_list(t_index);
%         mu = mu_list(mu_index);
% 
%         model = BoseHubbardChain(L, N, U, mu, t, V, k, BoundCond.open, conserved_QNum);
%         BoseHubbard_DMRG = DMRG(model);
%         dmrg_input.m_warmup = 10;
%         dmrg_input.sweep_list = [10,20, 30];
%         [Energy2, gnd_state] = BoseHubbard_DMRG.fDMRG(dmrg_input);
%         measurements = struct('site_indices',{},'operator_names',{});
% 
%         i=1;
%         for j=1:L
%             measurement.operator_names = ['b','a'];
%             measurement.site_indices = [i,j];
%             measurements(end+1) = measurement;
%         end
% 
%         returned_measurements = BoseHubbard_DMRG.Measurements(measurements);
%         r_distance = zeros(1,L);
%         for j=1:L
%             r_distance(j) = abs(i-j);
%         end
%         r_data = r_distance+1;
%         y_data = returned_measurements((1+(i-1)*L):((i-1)*L+L));
%         data((t_index-1)*size+mu_index, 1:2) = [t,mu];
%         data((t_index-1)*size+mu_index, 3:18) = y_data;
%     end
% end

% data = readmatrix('data3.csv'); 
% k_list = zeros(1,625);
% mu_list = data(:,2);
% t_list = data(:,1);
% r_data = (1:16)';
% for i=1: length(data)
%     y_data = data(i,3:18);
%     y_data = y_data';
%     [curvepar, fitpar] = fit(r_data,y_data,"x^(-b/2)");
%     k = coeffvalues(curvepar);
%     k_list(i) = k;
% end


t_list = (1:30)*0.01;
[mu_lists, t_lists] = phase_bound(t_list, BoundCond.open, 0);
scatter(mu_lists, t_lists,5, 'filled')
hold on
[mu_lists, t_lists] = phase_bound(t_list, BoundCond.open, 1);
scatter(mu_lists, t_lists,5, 'filled')
view([90 -90])

function [mu_lists, t_lists] = phase_bound(t_list, boundCond,k)
    t_lists = [];
    mu_lists = [];
    base_N = 16;
    base_L = 16;
    mu = 0;
    U = 1;
    V = 0;
    %k = 0.1;
    dmrg_input.m_warmup = 10;
    dmrg_input.m_list = [10,20,30];
    
    for j=0:0
        %L = base_L + j*base_L;
        L = base_L;
        N = base_N + j*base_N;
        for i=1: length(t_list)
           t = t_list(i);
           fprintf("\n calculting with t=%d\n", t);
           
           dmrg_input.L = L;
           dmrg_input.target_QNum = N;
           
           model = BoseHubbardChain(L, N, U, mu,t, V, k,boundCond, N); 
           BoseHubbard_DMRG = DMRG(model);
           energy = BoseHubbard_DMRG.fDMRG(dmrg_input);
           %[energy, gs] = model.ExactGsEnergy();

           model = BoseHubbardChain(L, N+1, U, mu,t, V, k, boundCond, N+1);
           BoseHubbard_DMRG = DMRG(model);
           energy_p = BoseHubbard_DMRG.fDMRG(dmrg_input);
           %[energy_p, gs] = model.ExactGsEnergy();

           model = BoseHubbardChain(L+1, N, U, mu,t, V, k, boundCond, N);
           BoseHubbard_DMRG = DMRG(model);
           energy_h = BoseHubbard_DMRG.fDMRG(dmrg_input);
           %[energy_h,gs] = model.ExactGsEnergy();

           mu_p = energy_p-energy;
           mu_h = -energy_h+energy;

           if mu_p <= mu_h
              break; 
           end

           t_lists(end+1) = t;
           mu_lists(end+1) = mu_p;
           t_lists(end+1) = t;
           mu_lists(end+1) = mu_h;
        end
    end
    fileArr = [transpose(t_lists) transpose(mu_lists)];
    writematrix(fileArr, "phase_dagram_data.csv");
end